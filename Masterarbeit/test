it=30
n=15
k=6
boundary= 'dirichlet'
cglob = 0
rang = np.arange(-3.,3.,.5)
yrang = None
resolution = 50
coarse_grid_resolution = 10

#c/err
if yrang is None:
	yrang = rang
err_r = np.zeros((len(rang),len(yrang)))
err_r1 = np.zeros((len(rang),len(yrang)))
err_r2 = np.zeros((len(rang),len(yrang)))
err_r3 = np.zeros((len(rang),len(yrang)))
p = helmholtz(boundary = boundary)
xi = 0
for x in rang:
	yi = 0
	for y in yrang:
		c = x+1j*y
		print c
		mus = {'k': k, 'c_glob': cglob, 'c_loc': c}
		gq, lq = localize_problem(p, coarse_grid_resolution, resolution, mus = mus)
		d = gq["d"]
		u = d.solve(mus)
		u = d.solve(mus)
		def knorm(u):
			return np.sqrt(d.h1_semi_norm(u)**2+k**2*d.l2_norm(u)**2)
		e_r = []
		e_r1 = []
		e_r2 = []
		e_r3 = []
		for i in range(it):
			print i,
			sys.stdout.flush()
			bases = create_bases2(gq,lq,n,transfer = 'robin')
			ru_r = reconstruct_solution(gq, lq, bases)
			del bases
			dif_r = u-ru_r
			e_r.append(d.h1_norm(dif_r)[0]/d.h1_norm(u)[0])
			e_r1.append(d.h1_semi_norm(dif_r)[0]/d.h1_semi_norm(u)[0])
			e_r2.append(d.l2_norm(dif_r)[0]/d.l2_norm(u)[0])
			e_r3.append(knorm(dif_r)[0]/knorm(u)[0])
		err_r[xi][yi]=np.mean(e_r)
		err_r1[xi][yi]=np.mean(e_r1)
		err_r2[xi][yi]=np.mean(e_r2)
		err_r3[xi][yi]=np.mean(e_r3)
		yi+=1
	xi+=1
X,Y = np.meshgrid(rang, yrang)
data = np.vstack([X.T.ravel(),Y.T.ravel(),err_r.ravel(), err_r1.ravel(), err_r2.ravel(), err_r3.ravel()]).T
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
from matplotlib import cm
fig = plt.figure()
ax = fig.gca(projection='3d')
surf = ax.plot_surface(X,Y,err_r,  cstride = 1, rstride =1, cmap = cm.coolwarm, linewidth=0, antialiased=False)
fig.colorbar(surf, shrink =0.5, aspect=5)
plt.show()
